# ABCDE Configuration for Raspberry Pi Auto-Ripper
# Place this file at ~/.abcde.conf or /etc/abcde.conf

# CD device
CDROM=/dev/sr0

# Output directory - change this to your network mount point if desired
OUTPUTDIR="/mnt/MUSIC"

# Output type and quality
OUTPUTTYPE="flac,mp3"
FLACENCODERSYNTAX=flac
FLACOPTS='--verify --best'
MP3ENCODERSYNTAX=lame
LAMEOPTS='-V0 --vbr-new'

# Actions to perform
ACTIONS=cddb,read,encode,tag,move,clean

# Non-interactive mode
INTERACTIVE=n

# Use cdparanoia for better error correction
CDROMREADERSYNTAX=cdparanoia            
CDPARANOIA=cdparanoia  
CDPARANOIAOPTS="--never-skip=40"

# Don't eject automatically (we handle ejection in Python)
EJECTCD=n

# Padding for track numbers
PADTRACKS=y
OUTPUTFORMAT='${ARTISTFILE}/${ALBUMFILE}/${TRACKNUM} - ${TRACKFILE}'

# Album art
GLYRC=glyrc
GLYRCOPTS=
ALBUMARTFILE="folder.jpg"
ALBUMARTTYPE="JPEG"

# Enhanced CDDB/MusicBrainz settings with multiple fallbacks
CDDBMETHOD=musicbrainz,cddb,freedb

# Primary MusicBrainz server
CDDBURL="https://musicbrainz.org/ws/2"

# Multiple CDDB servers for better reliability
CDDBAVAIL=gnudb.gnudb.org,freedb.freedb.org,cddb.cddb.com

# Local CDDB cache settings
CDDBLOCALDIR="$HOME/.cddb"
CDDBLOCALRECURSIVE=y
CDDBCOPYLOCAL=y
CDDBSUBMIT=n

# Fuzzy matching and retries
CDDBFUZZY=y
CDDBFUZZYPROTO=6

# Timeout settings (in seconds)
CDDBTIMEOUT=30
CDDBPROTO=6

# If all metadata fails, prompt for manual entry instead of using "Unknown"
INTERACTIVE=n
CDDBPARSEOPTS=""

# Custom function to handle metadata failures
post_read() {
    if [ -z "$DARTIST" ] || [ "$DARTIST" = "Unknown Artist" ] || [ -z "$DALBUM" ]; then
        echo "$(date): Metadata lookup failed, attempting manual lookup..." >> ~/.abcde.log
        
        # Try alternative disc ID lookup
        if command -v cd-discid >/dev/null; then
            DISCID=$(cd-discid $CDROM)
            echo "$(date): Disc ID: $DISCID" >> ~/.abcde.log
            
            # Try direct MusicBrainz lookup with disc ID
            if command -v curl >/dev/null; then
                MB_RESULT=$(curl -s "https://musicbrainz.org/ws/2/discid/$DISCID?inc=recordings+artist-credits" 2>/dev/null)
                if [ -n "$MB_RESULT" ] && echo "$MB_RESULT" | grep -q "artist"; then
                    echo "$(date): Found MusicBrainz data via direct lookup" >> ~/.abcde.log
                fi
            fi
        fi
        
        # If still no metadata, create descriptive default
        if [ -z "$DARTIST" ] || [ "$DARTIST" = "Unknown Artist" ]; then
            DARTIST="CD_$(date +%Y%m%d_%H%M)"
            echo "$(date): Using fallback artist name: $DARTIST" >> ~/.abcde.log
        fi
        
        if [ -z "$DALBUM" ] || [ "$DALBUM" = "Unknown Album" ]; then
            DALBUM="Ripped_$(date +%Y-%m-%d)"
            echo "$(date): Using fallback album name: $DALBUM" >> ~/.abcde.log
        fi
    fi
}

# Character translations for safe filenames
mungefilename ()
{
    echo "$@" | sed -e 's/^\.*//' -e 's/[^A-Za-z0-9._-]/_/g' -e 's/__*/_/g' -e 's/_$//g' -e 's/^_//g'
}

# Pre and post encode functions (use home directory for logs)
pre_read ()
{
    echo "$(date): Starting to rip: $CDDBDATA" >> ~/.abcde.log
}

post_encode ()
{
    echo "$(date): Completed rip: $OUTPUTDIR/$ARTISTFILE/$ALBUMFILE" >> ~/.abcde.log
    
    # Optional: notify completion (uncomment if you want notifications)
    # echo "CD rip completed: $ARTISTFILE - $ALBUMFILE" | wall
}

# Encoding threads (adjust based on Pi CPU)
MAXPROCS=2
